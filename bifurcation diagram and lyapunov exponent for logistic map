import numpy as np
import matplotlib.pyplot as plt

def logistic(r, x):
	return r * x * (1 - x)

n = 10000
r = np.linspace(2.5, 4.0, n)

iterations = 1000
last = 100

x = 1e-5 * np.ones(n) #set initial condition x0=0.00001 for all r

lyapunov = np.zeros(n) #initialize the Lyapunov vector

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 9), sharex=True)

#Compute partial sum of the Lyapunov exponont and display the bifurcation diagram
for i in range(iterations):
	x = logistic(r, x)
	lyapunov += np.log(abs(r - 2 * r * x))
	if i >= (iterations - last):
		ax1.plot(r, x, ',k', alpha=.25)

ax1.set_xlim(2.5, 4)
ax1.set_title("Bifurcation diagram")

#display the Lyapunov exponent
ax2.axhline(0, color='k', lw=.5, alpha=.5) #horizontal line (y=0)
ax2.plot(r[lyapunov < 0], lyapunov[lyapunov < 0] / iterations, '.k', alpha=.5, ms=.5)
ax2.plot(r[lyapunov >= 0], lyapunov[lyapunov >= 0] / iterations, '.r', alpha=.5, ms=.5)
ax2.set_xlim(2.5, 4)
ax2.set_ylim(-2, 1)
ax2.set_title("Lyapunov exponent")
plt.tight_layout()

plt.show()
